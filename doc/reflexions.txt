IDEES
=====

Permettre la géné/modif de terrain en multithread => faire un pthread pour remplir le terrain et voir ce que ça donne au rendu ! => possible avec des sections, mais alors un seul thread pour le rendu, et parfois ça coince.
Le rendu est certainement ralenti par le fait que omp parallel est pas fait pour être appelé 50x par seconde. => utiliser pthread pour gérer des threads qui existent tout le temps. Commencer par faire un qui génère le monde...

Corriger formule ciel, utiliser la focale, l'angle vert de l'image et le rapport render.

Pouvoir fonctionner en sous-ech en x et pas en y => version simplifiee ok, préparer fcl et invfcl ?

il faudrait vraiment simplifier les calculs loin, le clipping doux n'est pas suffisant.
 - faire un monde sous-ech ? et travailler dessus quand on est loin ? (par ex vide non prioritaire)
 - travailler autrement quand on est avec des pixels qui font plus d'un voxel ? (mais risque de rater des murs fins !) => implémenté rapidement, c'est pas mal


Faire une struct objet physique, ou collidable, avec une forme de collision (série de voxels pour la surface de contact et normale pour savoir dans quelle direction rebondir). Est-ce qu'il faut préparer toutes les formes de collision en avance ? Lent à faire en direct ?


Essayer de fixer un taille mémoire pour chaque colonne compressée pour économiser une indirection et avoir plus de mémoire en contiguité ?
(bof, de toutes façons c'est un tableau 2d donc les voisins peuvent pas être à la suite en mémoire).


FAIT
====

Est-ce qu'on vérifie quand une portion de rayon est trop vers le haut ou le bas ?
Si le bas d'une portion de rayon dépasse sz_z, plus besoin de la traiter. => fait, pas impressionnant.

Zones loin avec alpha => alpha blending de sdl


ABANDONNE
=========

Est-ce qu'on gagne en multi-threads à écrire dans des images séparées ? => bof, on voit que sans la partie image on ne gagne rien

On pourrait aussi compresser autrement : si 50 voxels plein mais de couleurs différentes, on dit jusque qu'il y a 50 voxels pleins.
On regadera les couleurs plus tard... En gros on compresse en RLE pour plein/vide et ailleurs on enregistre les détails des couleurs (en RLE).
Cette méthode permettra aussi de simplifier les calculs de collision.
=> on peut vérifier que ça va plus vite en mettant tout en uni. Avec une scène de montagne on passe de 80 (couleur au hasard pour chaque voxel) à 100 FPS (uni).
Ça complique pas mal l'algo pour des résultats limités.
